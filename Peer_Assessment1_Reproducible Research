

library(knitr)
library(ggplot2)
library(RMySQL)

rm(list=ls())    # clear workspace

library(dplyr)
data<-read.csv("activity.csv", sep=',', header=TRUE)  # loading data

## having a look at the data dimensions, variables 

names(data)

dim(data)

str(data)

head(data)

tail(data)

## adding time stamp


data <- mutate(data, hour = interval %/% 100, minute = interval %% 100)  

##Number of Steps taken per day

daily<-c()  # This will be the total number of steps taken per day


for (i in 1:61){ # total number of days in October and November is 31+30=61
    start<-(i-1)*288+1  # 288 five-minute steps in a day; 24*60/5=288
    last<-(i-1)*288+288
    temp<-data[start:last,1]    # extracting all 5-minute steps for each day
    daily<-c(daily,sum(temp))   # concatenating the daily totals  
}

##Making a histogram

daily_noNA<-daily[!is.na(daily)]  # 8 NA's are removed

hist(daily_noNA, xlab="steps",ylab="Frequency",
     main="Histogram of the total number of steps taken each day")

##Now calculating mean and median

mean(daily,na.rm=T)
median(daily,na.rm=T)

## Calculating the average daily activity pattern?


x<-data[,1]         # number of steps in 5-minute intevals
y<-matrix(x,288,61) # so as to get average of 5-minute intevals across all days  

five_average<-apply(y,1,mean,na.rm=TRUE)  # 5-minute interval average number of steps taken, 
# averaged across all days

plot(data$interval[1:288],five_average, type='l',col='darkred',
     xlab='Intervals',lwd=3,
     ylab='Average number of steps',
     main ='Average number of steps taken in 5-minute interval, averaged across all days')

## At 5 minute interval

hr<-data$hour[1:288]
min<-data$minute[1:288]

hr_max<-hr[which(five_average==max(five_average))]
min_max<-min[which(five_average==max(five_average))]

cat('The maximum number of steps occurs at',hr_max,':',min_max,'AM')

##Imputing missing values

sum(is.na(data[,1]))

## five_average is the 5-minute average across all days as shown in plotting the histogram above

## Then we can fill in all mising values with the average for that 5-minute interval across all days

## Then replicate the 5-minute interval average over the number of days

five_average_rep<- rep(five_average,61)

data1<-data   # creating a copy of the datset so as to not mess up the original data

for (i in 1:length(data1[,1])){  # there are 61 days
    
    if(is.na(data1[i,1])==TRUE){
        data1[i,1]= five_average_rep[i]  # missing values replaced
    }}

# Calculate the total number of steps taken per day using the data with filled NA's

daily1<-c()


for (i in 1:61){              #  the total number of days in October and November is 31+30=61
    start<-(i-1)*288+1        #  there are 288 five-minute steps in a day; 24*60/5=288
    last<-(i-1)*288+288
    temp<-data1[start:last,1]    # extracting all 5-minute steps for each day
    daily1<-c(daily1,sum(temp))   # concatenating the daily totals 
}

par(mfrow=c(2,1))

hist(daily1, xlab="steps",ylab="Frequency",
     main="Data with NA's filled in",border='green')

hist(daily_noNA, xlab="steps",ylab="Frequency",
     main="NA's not filled in",border='purple')


# The mean of  total number of steps taken per day is:

mean(daily1)

# The median of  total number of steps taken per day is:

median(daily1)

##Are there differences in activity patterns between weekdays and weekends?

data1$date<-as.Date(data1$date)

data1$day<-weekdays(data1$date)

data1_weekdays<-data1[(!data1$day %in% c("Saturday","Sunday")),]  # weekdays

data1_weekend<-data1[(data1$day %in% c("Saturday","Sunday")),]   #  weekend

weekday_steps<-data1_weekdays[,1]

temp<-matrix(weekday_steps,nrow=288)

weekday_steps_average<-apply(temp,1,mean)


weekend_steps<-data1_weekend[,1]

temp<-matrix(weekend_steps,nrow=288)

weekend_steps_average<-apply(temp,1,mean)

par(mfrow=c(2,1))

plot(data$interval[1:288],weekday_steps_average, type="l",xlab='Intervals',ylab="Number of steps",
     col='red',lwd=2, main="Weekday")

plot(data$interval[1:288],weekend_steps_average, type="l", xlab='Intervals',ylab="number of steps",
     col='blue',lwd=2,main="Weekend")

